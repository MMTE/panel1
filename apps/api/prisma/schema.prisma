// Panel1 Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  role      UserRole @default(CLIENT)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  clients   Client[]
  invoices  Invoice[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Client Management
model Client {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  companyName String?     @map("company_name")
  address     String?
  city        String?
  state       String?
  zipCode     String?     @map("zip_code")
  country     String?
  phone       String?
  status      ClientStatus @default(ACTIVE)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices     Invoice[]
  subscriptions Subscription[]

  @@map("clients")
}

// Billing System
model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  interval    BillingInterval
  isActive    Boolean  @default(true) @map("is_active")
  features    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                String             @id @default(cuid())
  clientId          String             @map("client_id")
  planId            String             @map("plan_id")
  status            SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime          @map("current_period_start")
  currentPeriodEnd   DateTime          @map("current_period_end")
  cancelAtPeriodEnd  Boolean           @default(false) @map("cancel_at_period_end")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  // Relations
  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  plan     Plan      @relation(fields: [planId], references: [id])
  invoices Invoice[]

  @@map("subscriptions")
}

model Invoice {
  id             String        @id @default(cuid())
  clientId       String        @map("client_id")
  userId         String        @map("user_id")
  subscriptionId String?       @map("subscription_id")
  invoiceNumber  String        @unique @map("invoice_number")
  status         InvoiceStatus @default(PENDING)
  subtotal       Decimal       @db.Decimal(10, 2)
  tax            Decimal       @default(0) @db.Decimal(10, 2)
  total          Decimal       @db.Decimal(10, 2)
  currency       String        @default("USD")
  dueDate        DateTime      @map("due_date")
  paidAt         DateTime?     @map("paid_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  // Relations
  client       Client        @relation(fields: [clientId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  items        InvoiceItem[]
  payments     Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String  @map("invoice_id")
  description String
  quantity    Int     @default(1)
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Payment {
  id              String        @id @default(cuid())
  invoiceId       String        @map("invoice_id")
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  gateway         String        // stripe, paypal, manual, etc.
  gatewayId       String?       @map("gateway_id")
  gatewayResponse Json?         @map("gateway_response")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

// Enums
enum UserRole {
  ADMIN
  CLIENT
  RESELLER
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BillingInterval {
  MONTHLY
  YEARLY
  WEEKLY
  DAILY
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}